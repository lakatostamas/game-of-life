{"version":3,"sources":["components/Board/consts.ts","components/Board/utils.ts","components/Board/hook.ts","components/Board/Board.tsx","components/App/App.tsx","reportWebVitals.js","index.tsx","components/Board/Board.module.css"],"names":["operations","generateLayout","rowsCount","colCount","Array","from","map","generateNextState","grid","row","rowIdx","field","colIdx","neighborCount","point","x","y","gridSize","length","reduce","neighborCounts","currentOperation","operationX","operationY","observedField","xBoundary","yBoundary","_isWithinGrid","_countNeighbors","getPopulationSize","sum","acc","curr","useBoard","colsCount","useState","Math","max","setGrid","originalGrid","setOriginalGrid","generation","setGeneration","populationSize","setPopulationSize","isRunning","setIsRunning","runningRef","useRef","current","calculateGridNextState","prevValue","nextGrid","runSimulation","useCallback","setTimeout","onToggleCell","value","updateCell","onClear","onReset","onStartStopClick","onStepForward","Board","props","role","onClick","className","styles","style","gridTemplateColumns","rows","col","cell","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f515c66f.chunk.js","sourcesContent":["export const operations = [\n  [0, 1],\n  [0, -1],\n  [-1, 1],\n  [-1, 0],\n  [-1, -1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n];\n","import { operations } from './consts';\nimport { Grid, Point } from './model';\n\nexport function generateLayout(rowsCount: number, colCount: number) {\n  return Array.from(Array(rowsCount)).map(() => Array.from(Array(colCount), () => 0));\n}\n\nexport function generateNextState(grid: Grid) {\n  return grid.map((row, rowIdx) =>\n    row.map((field, colIdx) => {\n      const neighborCount = _countNeighbors(grid, [rowIdx, colIdx]);\n\n      // underpopulation or overpopulation\n      if (neighborCount < 2 || neighborCount > 3) {\n        return 0;\n      }\n\n      if (neighborCount === 3 && field === 0) {\n        return 1;\n      }\n\n      return field;\n    }),\n  );\n}\n\nexport function getPopulationSize(grid: Grid) {\n  return grid.reduce((sum, row) => {\n    const rowSum = row.reduce((acc, curr) => acc + curr, 0);\n    return sum + rowSum;\n  }, 0);\n}\n\n// there are other more performant ways to recreate the grid\n// for example: immer.js, but I did not want to introduce any\n// extra dependency in this project\nexport function updateCell(grid: Grid, point: Point) {\n  const [x, y] = point;\n  const value = grid[x][y];\n\n  return grid.map((row, rowIdx) =>\n    row.map((field, colIdx) => {\n      if (rowIdx === x && colIdx === y) {\n        return value === 0 ? 1 : 0;\n      }\n\n      return field;\n    }),\n  );\n}\n\nfunction _countNeighbors(grid: Grid, point: Point) {\n  const [x, y] = point;\n  const gridSize = [grid.length, grid[0].length];\n  return operations.reduce((neighborCounts, currentOperation) => {\n    const [operationX, operationY] = currentOperation;\n\n    const observedField: Point = [x + operationX, y + operationY];\n\n    if (!_isWithinGrid(observedField, gridSize as [number, number])) {\n      return neighborCounts;\n    }\n\n    const fieldValue = grid[observedField[0]][observedField[1]];\n\n    return neighborCounts + fieldValue;\n  }, 0);\n}\n\nfunction _isWithinGrid(point: Point, gridSize: [number, number]) {\n  const [x, y] = point;\n  const [xBoundary, yBoundary] = gridSize;\n\n  return x >= 0 && x < xBoundary && y >= 0 && y < yBoundary;\n}\n","import { useState, useRef, useCallback } from 'react';\nimport { Grid, Point } from './model';\nimport {\n  generateLayout,\n  generateNextState,\n  getPopulationSize,\n  updateCell,\n} from './utils';\n\nexport function useBoard(rowsCount: number, colsCount: number) {\n  const [grid, setGrid] = useState(\n    generateLayout(Math.max(rowsCount, 1), Math.max(colsCount, 1)),\n  );\n  const [originalGrid, setOriginalGrid] = useState<Grid | null>(null);\n  const [generation, setGeneration] = useState(0);\n  const [populationSize, setPopulationSize] = useState(0);\n\n  const [isRunning, setIsRunning] = useState(false);\n\n  const runningRef = useRef(isRunning);\n  runningRef.current = isRunning;\n\n  const calculateGridNextState = () => {\n    setGeneration((prevValue) => prevValue + 1);\n    setGrid((grid) => {\n      const nextGrid = generateNextState(grid);\n      setPopulationSize(getPopulationSize(nextGrid));\n\n      return nextGrid;\n    });\n  };\n\n  const onStartStopClick = () => {\n    setIsRunning(!isRunning);\n    runningRef.current = !isRunning;\n\n    if (!isRunning) {\n      if (!originalGrid) {\n        setOriginalGrid(grid);\n      }\n      runSimulation();\n    }\n  };\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    calculateGridNextState();\n\n    setTimeout(runSimulation, 1000);\n  }, []);\n\n  const onToggleCell = (point: Point) => {\n    if (generation > 0) {\n      return;\n    }\n\n    setGrid(updateCell(grid, point));\n  };\n\n  const onClear = () => {\n    setIsRunning(false);\n    setGrid(generateLayout(Math.max(rowsCount, 1), Math.max(colsCount, 1)));\n    setOriginalGrid(null);\n    setGeneration(0);\n    setPopulationSize(0);\n  };\n\n  const onReset = () => {\n    if (!originalGrid) {\n      return;\n    }\n\n    setIsRunning(false);\n    setGrid(originalGrid);\n    setGeneration(0);\n    setPopulationSize(getPopulationSize(originalGrid));\n  };\n\n  const onStepForward = () => {\n    if (!originalGrid) {\n      setOriginalGrid(grid);\n    }\n\n    calculateGridNextState();\n  };\n\n  return {\n    calculateGridNextState,\n    runSimulation,\n    onToggleCell,\n    onClear,\n    onReset,\n    onStartStopClick,\n    onStepForward,\n    isRunning,\n    populationSize,\n    generation,\n    grid,\n  };\n}\n","import React from 'react';\nimport { useBoard } from './hook';\nimport styles from './Board.module.css';\n\ninterface IBoardProps {\n  rowsCount: number;\n  colsCount: number;\n}\n\nfunction Board(props: IBoardProps) {\n  const { rowsCount = 0, colsCount = 0 } = props;\n  const {\n    onStartStopClick,\n    onClear,\n    onReset,\n    onStepForward,\n    onToggleCell,\n    grid,\n    isRunning,\n    populationSize,\n    generation,\n  } = useBoard(rowsCount, colsCount);\n\n  return (\n    <>\n      <button role=\"button\" onClick={onStartStopClick}>\n        {isRunning ? 'stop' : 'start'}\n      </button>\n      <button role=\"button\" onClick={onClear}>\n        Clear\n      </button>\n      <button role=\"button\" onClick={onReset}>\n        Reset\n      </button>\n      <button role=\"button\" onClick={onStepForward}>\n        Step forward\n      </button>\n      <p>Population size: {populationSize}</p>\n      <p>Generation: {generation}</p>\n      <div\n        className={styles.grid}\n        style={{\n          gridTemplateColumns: `repeat(${colsCount}, 20px)`,\n        }}\n      >\n        {grid.map((rows, rowIdx) =>\n          rows.map((col, colIdx) => (\n            <div\n              role=\"button\"\n              key={`${rowIdx}-${colIdx}`}\n              onClick={() => onToggleCell([rowIdx, colIdx])}\n              className={styles.cell}\n              style={{\n                backgroundColor:\n                  grid[rowIdx][colIdx] === 1 ? 'green' : 'transparent',\n              }}\n            />\n          )),\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from '../Board/Board';\n\nfunction App() {\n  return (\n    <main>\n      <Board colsCount={50} rowsCount={50} />\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Board_grid__2h07E\",\"cell\":\"Board_cell__27Ihq\"};"],"sourceRoot":""}